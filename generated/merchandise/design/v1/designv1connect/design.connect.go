// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: merchandise/design/v1/design.proto

package designv1connect

import (
	v1 "cmk/generated/merchandise/design/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DesignServiceName is the fully-qualified name of the DesignService service.
	DesignServiceName = "merchandise.design.v1.DesignService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DesignServiceGetProcedure is the fully-qualified name of the DesignService's Get RPC.
	DesignServiceGetProcedure = "/merchandise.design.v1.DesignService/Get"
	// DesignServiceGetAllProcedure is the fully-qualified name of the DesignService's GetAll RPC.
	DesignServiceGetAllProcedure = "/merchandise.design.v1.DesignService/GetAll"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	designServiceServiceDescriptor      = v1.File_merchandise_design_v1_design_proto.Services().ByName("DesignService")
	designServiceGetMethodDescriptor    = designServiceServiceDescriptor.Methods().ByName("Get")
	designServiceGetAllMethodDescriptor = designServiceServiceDescriptor.Methods().ByName("GetAll")
)

// DesignServiceClient is a client for the merchandise.design.v1.DesignService service.
type DesignServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error)
}

// NewDesignServiceClient constructs a client for the merchandise.design.v1.DesignService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDesignServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DesignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &designServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+DesignServiceGetProcedure,
			connect.WithSchema(designServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAll: connect.NewClient[v1.GetAllRequest, v1.GetAllResponse](
			httpClient,
			baseURL+DesignServiceGetAllProcedure,
			connect.WithSchema(designServiceGetAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// designServiceClient implements DesignServiceClient.
type designServiceClient struct {
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	getAll *connect.Client[v1.GetAllRequest, v1.GetAllResponse]
}

// Get calls merchandise.design.v1.DesignService.Get.
func (c *designServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetAll calls merchandise.design.v1.DesignService.GetAll.
func (c *designServiceClient) GetAll(ctx context.Context, req *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error) {
	return c.getAll.CallUnary(ctx, req)
}

// DesignServiceHandler is an implementation of the merchandise.design.v1.DesignService service.
type DesignServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error)
}

// NewDesignServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDesignServiceHandler(svc DesignServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	designServiceGetHandler := connect.NewUnaryHandler(
		DesignServiceGetProcedure,
		svc.Get,
		connect.WithSchema(designServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	designServiceGetAllHandler := connect.NewUnaryHandler(
		DesignServiceGetAllProcedure,
		svc.GetAll,
		connect.WithSchema(designServiceGetAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/merchandise.design.v1.DesignService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DesignServiceGetProcedure:
			designServiceGetHandler.ServeHTTP(w, r)
		case DesignServiceGetAllProcedure:
			designServiceGetAllHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDesignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDesignServiceHandler struct{}

func (UnimplementedDesignServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("merchandise.design.v1.DesignService.Get is not implemented"))
}

func (UnimplementedDesignServiceHandler) GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("merchandise.design.v1.DesignService.GetAll is not implemented"))
}
